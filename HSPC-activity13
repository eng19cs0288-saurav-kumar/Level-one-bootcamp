#include<stdio.h>
#include<math.h>

struct POINT
{
float x;
float y;
};
typedef struct POINT point;

struct RECTANGLE
{
float length;
float breadth;
float area;
point p[3];
};

typedef struct RECTANGLE rectangle;

void input_1(rectangle *one)
{
    for(int i=0;i<3;i++)
    {
        printf("point %d \n",i+1);
        printf("enter x coordinate and y coordinate:");
        scanf("%f%f",&one->p[i].x,&one->p[i].y);
    }
}

void input_n(int n,rectangle rt[])
{
    for(int i=0;i<n;i++)
        input_1(&rt[i]);
} 

float calc_distance(float x1 , float x2, float y1, float y2 )
{
    float distance=sqrt(pow((x2-x1),2)+pow((y2-y1),2));
    return distance;
}

void calc_l_b(rectangle *one)
{
    float a,b,c;
    a=calc_distance(one->p[0].x,one->p[1].x,one->p[0].y,one->p[1].y);
    b=calc_distance(one->p[0].x,one->p[2].x,one->p[0].y,one->p[2].y);
    c=calc_distance(one->p[1].x,one->p[2].x,one->p[1].y,one->p[2].y);
    if(a<=b && a<=c)
    {
        one->length=a;
        one->breadth=fmin(b,c);
    }
    else if(b<=a && b<=c)
    {
        one->length=b;
        one->breadth=fmin(a,c);
    }
    else
    {
        one->length=c;
        one->breadth=fmin(a,c);
    }
}

void compute_area_1(rectangle *one)
{
    calc_l_b(one);
    one->area=one->length*one->breadth;
}

void compute_area_n(int n,rectangle rt[])
{
    for(int i=0;i<n;i++)
        compute_area_1(&rt[i]);
}

void output_1(rectangle *one)
{
    printf("Area of rectangle with vertices (%.2f,%.2f) , (%.2f,%.2f) , (%.2f,%.2f) is %.2f\n",one->p[0].x,one->p[0].y,one->p[1].x,one->p[1].y,one->p[2].x,one->p[2].y,one->area);
}

void output_n(int n,rectangle rt[])
{
    for(int i=0;i<n;i++)
        output_1(&rt[i]);
} 

int main()
{
    int n;
    printf("enter no. of rectangles");
    scanf("%d",&n);
    rectangle rt[n];
    input_n(n,rt);
    compute_area_n(n,rt);
    output_n(n,rt);
    return 0;
}
